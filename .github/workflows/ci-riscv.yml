name: RISC-V CI

on:
  push:
    branches-ignore:
      - 'ci/**'
      - '!ci/gha**'
  pull_request:
    branches:
      - 'master'

jobs:
  checkinstall:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Install APT Dependencies
      run: |
        sudo apt-get install -y ninja-build ninja-build pipx
        pipx install meson==0.55.0
    - run: |
        meson setup build --prefix $PWD/install -Dtests=false
        meson install -C build --quiet
        diff <(find simde/ -type f -name "*.h")  <(cd install/include/; find simde -type f -name "*.h" )

  formatting:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Install pcre2grep
      run: sudo apt-get update && sudo apt-get install -y pcre2-utils
    # Check for trailing whitespace
    - name: Trailing whitespace
      run: find simde/ \( -name '*.c' -o -name '*.h' \) -exec grep -nP '\s+$' {} + && exit 1 || exit 0
    # We use spaces, not tabs.  I don't want to start a holy war here;
    # I don't actually have a strong preference between the two, but I
    # do have a strong preference for consistency, so don't @ me.
    - name: Tabs
      run: find simde/ \( -name '*.c' -o -name '*.h' \) -exec grep -nP '\t' {} + && exit 1 || exit 0
    # s/8/16/ will result in this if the input is x86.
    - name: Bad substitutions
      run: git grep -i 'x''1''6''6' && exit 1 || exit 0
    - name: Incorrect assertions in test/
      run: grep -PR '(?<=[^a-zA-Z0-9_])simde_assert_u?int(8|16|32|64)(?>[^a-zA-Z0-9_])' test/ && exit 1 || exit 0
    # Check to make sure no source files have the executable bit set
    - name: Executable sources
      run: find \( -name '*.c' -o -name '*.h' \) -executable | grep -q '.' && exit 1 || exit 0
    # Make sure neon.h includes all the NEON headers.
    - name: Missing NEON includes
      run: for f in simde/arm/neon/*.h; do grep -q "include \"neon/$(basename "$f")\"" simde/arm/neon.h || (echo "Missing $f" && exit 1); done
    # Make sure sve.h includes all the SVE headers.
    - name: Missing SVE includes
      run: for f in simde/arm/sve/*.h; do grep -q "include \"sve/$(basename "$f")\"" simde/arm/sve.h || (echo "Missing $f" && exit 1); done
    # Make sure msa.h includes all the MSA headers.
    - name: Missing MSA includes
      run: for f in simde/mips/msa/*.h; do grep -q "include \"msa/$(basename "$f")\"" simde/mips/msa.h || (echo "Missing $f" && exit 1); done
    # Make sure we can find the expected header guards.  It's easy to miss this when doing C&P
    - name: Header guards
      run: for file in $(find simde/*/ -name '*.h'); do grep -q "$(echo "$file" | tr '[:lower:]' '[:upper:]' | tr '[:punct:]' '_')" "$file" || (echo "Missing or incorrect header guard in $file" && exit 1); done
    # There should be an empty line at the end of every file
    - name: Newline at EOF
      run: for file in $(find simde -name '*.h'); do if [ -n "$(tail -c 1 "$file")" ]; then echo "No newline at end of $file" && exit 1; fi; done
    # Don't #ifndef ; use !defined(...) instead.  ifndef leads to annoying inconsistencies
    - name: ifndef
      run: for file in $(find simde -name '*.h'); do grep -qP '^ *# *ifndef ' "${file}" && exit 1 || exit 0; done
    # List of headers we want Meson to install
    - name: Meson install headers
      run: for file in $(find simde -name '*.h'); do grep -qF "$(basename "${file}" .h)" meson.build || (echo "${file} missing from top-level meson.build" && exit 1); done
    # Make sure we don't accidentally use `vector ...` instead of SIMDE_POWER_ALTIVEC_VECTOR(...)
    - name: AltiVec raw vector keyword
      run: find simde/ \( -name '*.c' -o -name '*.h' \) -exec grep -nP 'vector( +)((bool|signed|unsigned) +)?(double|float|long long|long|int|short|char)' {} + && exit 1 || exit 0
    # Check indentation of preprocessor directives.
    - name: Preprocessor directive indentation
      run: find simde/*/ -name 'avx*.h' -exec pcre2grep -M '{\n#' {} + && exit 1 || exit 0
    - name: Stray `&& 0`
      run: git grep ' && 0' simde/ test/ && exit 1 || exit 0

  rvv-qemu:
    strategy:
      fail-fast: false
      matrix:
        include:
        - version: 17
          cross: rv64gcv1_zfh_zvfh_vlen128_elen64
          arch_gnu: riscv64
          arch_deb: riscv64
          distro: ubuntu-22.04
        - version: 17
          cross: rv64gcv1_zfh_zvfh_vlen256_elen64
          arch_gnu: riscv64
          arch_deb: riscv64
          distro: ubuntu-22.04
        - version: 17
          cross: rv64gcv1_zfh_zvfh_vlen512_elen64
          arch_gnu: riscv64
          arch_deb: riscv64
          distro: ubuntu-22.04
    runs-on: ${{ matrix.distro }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - run: sudo apt-get update
    - name: CPU Information
      run: cat /proc/cpuinfo
    - name: Install APT Dependencies
      run: |
        sudo apt-get install -y python3 python3-pip git ninja-build pkg-config libglib2.0-dev \
          lsb-release wget software-properties-common gnupg
        pip3 install sphinx==5.3.0
        sudo add-apt-repository ppa:savoury1/virtualisation
        sudo add-apt-repository ppa:savoury1/display
        sudo apt-get update -y
        sudo apt-get -yq install ninja-build parallel \
          binfmt-support qemu-user-static libc6-${{ matrix.arch_deb }}-cross \
          libstdc++-12-dev-${{ matrix.arch_deb }}-cross binutils-${{ matrix.arch_gnu }}-linux-gnu
        python3 -m pip install meson==0.55.0
    - name: Install Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ matrix.version }}
        sudo apt-get install -y clang-${{ matrix.version }} lldb-${{ matrix.version }} lld-${{ matrix.version }}
    - name: Install Qemu
      run: |
        git clone https://gitlab.com/qemu-project/qemu.git
        cd qemu
        mkdir install
        sudo ./configure --target-list=riscv64-linux-user
        sudo make
        sudo make install
        qemu-riscv64 --version
        cd
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.distro }}-${{ matrix.cross }}
    - name: add ccache to the build path
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
    - name: Configure
      run: |
        meson setup --cross-file=docker/cross-files/${{ matrix.cross }}-clang-${{ matrix.version }}-ccache.cross build \
          || (cat build/meson-logs/meson-log.txt ; false)
    - name: Build
      run: ninja -C build -v
    - name: Test
      run: meson test -C build --print-errorlogs --print-errorlogs $(meson test -C build --list | grep -v emul)
